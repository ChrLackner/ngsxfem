#+TITLE: Example python script for xfem stuff
#+AUTHOR: Christoph Lehrenfeld
#+PROPERTY: header-args *python* :tangle yes :results output type: scalar format: org
#+email: christoph.lehrenfeld@rwth-aachen.de
#+OPTIONS: ^:nil
#+OPTIONS: tex:t  
-----
* simple python start-off
  At the beginning we briefly announce ourselves with a friendly "hello":
#+NAME: start
#+BEGIN_SRC python -n -r :exports both
  # interactive modifications to d1_approx.py
  print ("hello from d1_approx.py ;-)")
#+END_SRC

which simply results in:
#+RESULTS: start

* import ngsolve and xfem functionality to python
  Then we import a lot of functionality from ngsolve and ngsxfem.
#+NAME: imports
#+BEGIN_SRC python +n -r
  from ngsolve.solve import *
  from ngsolve.comp import *
  from ngsolve.fem import *
  from ngsolve.la import *
  from ngsolve.bla import *
  import ngsolve.ngstd as ngstd
  from ngsolve.solve import Redraw

  #from libngsxfem_py.xfem import *
  import libngsxfem_py.xfem as xfem                                 (ref:libxfem)

  from math import sin                                                  (ref:sin)
  from time import sleep                                              (ref:sleep)
#+END_SRC
We included the command [[(sin)][sin]] for no reason.
We included the command [[(sleep)][sleep]] to pause between the individual shape functions.
    
* small functions for inspections:
 ... minor explanation ... 
** print dofs per elements:
#+NAME: printdofs
#+BEGIN_SRC python +n -r
  def PrintDofs(pde,mesh,fes):
      print ("Printing dofs per element:\n\n")
      for i in mesh.Elements():
          print("dofnrs of element", i, ":\n", fes.GetDofNrs(i))
#+END_SRC
          
** show shape functions
Every (extended) finite element function can be represented as
\begin{equation}
u = \sum_{i=1}^{N} u_i \phi(x) + \sum_{i=1}^{N_x} u_i^x \phi^x(x).
\end{equation}
By setting the coefficients $u_i$, $u_i^x$ [[(setzero)][to zero]] and only [[(shapefct)][one coefficient to 1]], we can construct
$u = \phi(x)$ or $u = \phi^x(x)$. We do this for [[(eachshp)][every shape function]] 
and call a [[(redraw)][Redraw]] and a [[(slp)][short delay]] between the functions.
#+NAME: shapetest
#+BEGIN_SRC python +n -r
  def ShapeTest(pde,u):
      print ("Shape test:\n")
      u[:][:] = 0                                                   (ref:setzero)
      for i in range(u.size):                                       (ref:eachshp)
          print ("i = ", i ,".")
          u[:][i-1] = 0.0
          u[:][i] = 1.0                                            (ref:shapefct)
          Redraw(blocking=True)                                      (ref:redraw)
          sleep(1)                                                      (ref:slp)
#+END_SRC
          
* put everything together
#+NAME: test
#+BEGIN_SRC python +n -r
  def Test(pde):
      PrintDofs(pde,pde.Mesh(),pde.spaces["fescomp"])
      PrintDofs(pde,pde.Mesh(),pde.spaces["fescomp"].XFESpace)
      ShapeTest(pde,pde.gridfunctions["u"].vec)
#+END_SRC

* resulting file: [[file:d1_approx.py][d1_approx.py]]

#+RESULTS:



