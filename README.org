#+OPTIONS: toc:2   

* About =ngsxfem= 
=ngsxfem= is an add-on library to the finite element package [[https://ngsolve.org][Netgen/NGSolve]] which enables the use of unfitted finite element technologies known as XFEM, CutFEM, TraceFEM, Finite Cell, ... .
=ngsxfem= is an academic software. 
Its primary intention is to facilitate the development and validation of new numerical methods.

** The main features
*** Numerical integration on implicitly described (via a level set function) geometries which are not fitted to the mesh
Given a level set function \phi which describes the geometry (e.g. \Omega = { \phi < 0 }) a piecewise linear approximation is made.
On simplices (triangles and tetrahedra) this gives a planar intersection on every element which allows for an explicit decomposition into simple geometries.
On these simple (uncut) geometries standard quadrature rules of arbitrary order can be applied which results in quadrature rules for the (approximated) sub-domains where the level set is positive/negative/zero.

#+html: <p align="center"><img src="doc/graphics/cuttet.jpg" height="175"/><img src="doc/graphics/intpoints.jpg" height="175"/> <br>Left: Subdivision strategy for tetrahedra. Right: Integration points on a cut element</p>


*** Tools to work on an "active mesh" only
In unfitted finite element methods some functions and integrals are only defined on a subset of the mesh. Accordingly finite element spaces and integrals have to be defined only on this active part of the mesh. 
=ngsxfem= offers the tools to mark the corresponding elements and facets and use the marking during assembly and definition of finite element spaces. 
On cut elements one often also uses locally modified finite elements, e.g. by restriction of finite elements on the background mesh.

#+html: <p align="center"><img src="doc/graphics/unfittedmesh.jpg" height="175"/> <img src="doc/graphics/xfem.jpg" height="175"/>  <br>Left: Active elements with respect to level set function. Right: XFEM basis function. </p> 

*** Higher order representation of implicit level-set geometries 
To obtain higher order accuracy of integrals, we offer a mesh transformation technique in the spirit of isoparametric finite element methods. 
Thereby the piecewise linear approximation of the level-set (which is only of second order) is mapped onto a higher order accurate approximation of the true geometry.

#+html: <p align="center"><img src="doc/graphics/lsetcurv.jpg" height="175"/> <br> Left: Piecewise linear approximation. Right: Higher-order mapped domain</p>

*** Space-Time Finite Elements for the treatment of moving domain problems
To obtain robust method for partial differential equations on unfitted moving domain we can formulate space-time discretizations. =ngsxfem= provides the necessary tools (so far only in two space dimensions) to define space-time finite element spaces and to integrate on space-time domains. Furthermore, it extends the tools for higher order accurate geometry handling into the space-time setting.
#+html: <p align="center"><img src="doc/graphics/spacetime1.png" height="175"/><img src="doc/graphics/spacetime2.png" height="175"/> <br>Top: Bottom: </p> 

*** Geometries described by multiple level sets
Many geometries do not have -- due to sharp corners or edges -- an implicit description by a *smooth* level set function. Instead multiple level set functions can be used to describe theses geometries. 
To work with these more complicated domains, =ngsxfem= provides tools to work with these geometries as with simple geometries, for example computing the level-set description of the boundary and exterior.  
To enable integration on such domains =ngsxfem= generates quadrature rules with respect to every level-set which cuts a given element. Furthermore, it provides the analogous tools to the single level-set setting, to mark those elements of the mesh which are relevant to a given geometry.

#+html: <p align="center"><img src="doc/graphics/zdisc-cut-elements.png" height="175"/> <img src="doc/graphics/quadrature_mlset.jpg" alt="TODO" height="175"/> <br>Left: Elements marked with respect to multiple level sets. Right: Quadrature for multiple cuts.</p> 


** Applications and Literature
=ngsxfem= has been used in a variety of applications. These include surface problems [[https://arxiv.org/abs/1909.08327][link]], fluid-structure interaction problems with contact [[https://arxiv.org/abs/2011.08691][link]], reduced order methods [[https://arxiv.org/abs/2010.04953][link]] and optimal contoll problems [[https://arxiv.org/abs/2003.00352][link]]. 

For a comprehensive and up-to-date list of the scientific works which have used =ngsxfem=, please see the Literature section [[file:doc/paper.md][paper.md]].


* Installation
** Docker container
#+BEGIN_SRC shell
docker run -i -t schruste/ngsxfem:latest /bin/bash
#+END_SRC

** Pre-compiled binaries
TODO

** Building from source

To build =ngsxfem= from source, the corresponding version of =Netgen/NGSolve= is required to be installed. This can either be done in advance (default option), or as an external dependency.
=ngsolve= is pulled as a submodule. The version of the submodule is compatible with this version of =ngsxfem=. If in doubt make sure that you install exactly this version of =NGSolve= before building =ngsxfem=.


*** Linux
**** Prerequisites on Ubuntu
On Ubuntu =python3-dev= similar dependencies as required by =NGSolve=, see [[https://ngsolve.org/docu/latest/install/installlinux.html][www.ngsolve.org]]

**** Building =ngsxfem= with pre-installed =NGSolve=
Make sure that the installed version of =NGSolve= is compatible with the current =ngsxfem= release. If you are building the latest release of =ngsxfem=, then the latest release of =NGSolve= will be sufficient.

Choose a directory where you wish to download the source files and build the library. We shall refer to this location as =BASEDIR=. Here the git repository need to be cloned.
#+BEGIN_SRC shell
export BASEDIR=`pwd`

git clone https://github.com/ngsxfem/ngsxfem.git src-xfem
#+END_SRC

You then need to create a build directory, configure the build, build and install the build. Here =INSTLOCATION= should be the install directory of =NGSolve=. This depends on the way in which =NGSolve= was installed.
#+BEGIN_SRC shell
mkdir build-xfem
cd build-xfem

cmake \
 -DCMAKE_INSTALL_PREFIX=INSTLOCATION \
 -DBUILD_NGSOLVE=OFF \
 ${BASEDIR}/src-xfem

make
make install
#+END_SRC

You may want to add =-jx= with 'x' the number of threads you wish to compile with.

**** Building the NGS-Suite and =ngsxfem= together 
If you do not have =Netgen/NGSolve= installed in advance, you can build this as a sub-module. Again, choose a directory where you wish to build and install everything.

#+BEGIN_SRC shell
export BASEDIR=`pwd`

git clone https://github.com/ngsxfem/ngsxfem.git src-xfem
cd src-xfem
git submodule update --init

cd ${BASEDIR}
mkdir -p ${BASEDIR}/build-xfem ${BASEDIR}/inst

cd ${BASEDIR}/build-xfem
cmake \
 -DCMAKE_INSTALL_PREFIX=${BASEDIR}/inst \
 -DBUILD_NGSOLVE=ON \
 ${BASEDIR}/src-xfem

make
make install
#+END_SRC
Now to start =Netgen= from the command line =${BASEDIR}/inst/bin= has to added to the =PATH=. To run python scripts, the =PYTHONPATH= must be set appropriately
#+BEGIN_SRC shell
export PYTHONPATH=${BASEDIR}/inst/`python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib(1,0,''))"`
#+END_SRC


**** Fix of potential issues
If you have compiling problems or at run time some NGSolve symbols are not found, it may be (happened in some configurations) that the NGSolve compiler and linker wrapper =ngscxx= and =ngsld= were not used. In this case you may add
#+BEGIN_SRC shell
-DCMAKE_CXX_COMPILER=ngscxx -DCMAKE_LINKER=ngsld
#+END_SRC
to the cmake configuration.

**** Updating =ngsxfem=
To update =ngsxfem=, update the source files and build everything again:
#+BEGIN_SRC shell
cd ${BASEDIR}/src-xfem
git pull

cd ${BASEDIR}/build

make
make install
#+END_SRC
If =NGSolve= was built as a submodule, then after pulling the lates =ngsxfem= sources, also update NGSolve by calling =git submodule update --init= in the =src-xfem= directory.

*** MacOS
To build on MacOS you require the Xcode Command Line Tools. These can be installed by calling =xcode-select --install= from within a terminal. Furthermore, CMake must be downloaded and installed. This can be done via [[https://cmake.org][CMake website]]. To use cmake from a terminal, make sure to install the command line tools: Open CMake, in the "Tools" menu click on "How to Install For Command Line Use" and follow one of the suggested options.

We recommend that you install =NGSolve= this can either be done [[https://ngsolve.org/docu/latest/install/installmacnative.html][from source]] or by installing the latest [[https://ngsolve.org/downloads][pre-built dmg]]. Make sure that all environment variables have been [[https://ngsolve.org/docu/latest/install/gettingstarted.html#mac-os-x][set correctly]].

The only difference compared to linux is that CMake needs to be given the location of the NGSolve cmake configuration. This is done by giving the additional flag =-DNGSolve_DIR=INSTLOCATION/Contents/Resources/CMake=. If you have installed NGSolve using the dmg file, then =INSTLOCATION= is =/Applications/Netgen.app=. Once NGSolve is successfully installed, then =ngsxfem= can be build using the following steps:
#+BEGIN_SRC shell
export BASEDIR=`pwd`
git clone https://github.com/ngsxfem/ngsxfem.git src-xfem

mkdir -p ${BASEDIR}/build-xfem
cd ${BASEDIR}/build-xfem

cmake \
 -DCMAKE_INSTALL_PREFIX=INSTLOCATION \
 -DNGSolve_DIR=INSTLOCATION/Contents/Resources/CMake \
 -DBUILD_NGSOLVE=OFF \
 ${BASEDIR}/src-xfem

make
make install
#+END_SRC


** Testing the installation
We run test by default. I you wish to test your self-built binaries, go to the =build-xfem= directory and run =make test= or =ctest=. 
If you need to see specific tests failing use ctest -V.
To run individual tests use ctest -R <regex>. E.g. ctest -R cutint to only run cut integration tests.
Note that we use =pytest= and =psutil= (with python version > 3). These can easily be installed using =pip=. 


* Examples and Documentation
At [[https://github.com/ngsxfem/ngsxfem-jupyter]] you can find tutorial-style jupyter notebooks for ngsxfem.
These explain the core functionalities and usage of the tools provided by =ngsxfem=.

In addition to this, there are a number of demo files located in =demos/= illustrating the use of =ngsxfem= for some known unfitted finite element discretisations:
 * =demos/cutfem.py= : stationary interface problem with a (P1) CutFEM method with Nitsche
 * =demos/nxfem.py= : stationary interface problem with a (P1) XFEM method with Nitsche (similar to =cutfem.py=)
 * =demos/nxfem_higher_order.py= : stationary interface problem with a higher order isoparametric unfitted FEM with Nitsche (similar to =nxfem.py=)
 * =demos/fictdom_ghostpen.py= : stationary fictitious domain problem with isoparametric CutFEM, Nitsche and ghost penalty stabilization
 * =demos/fictdom_dg_ghostpen.py= : stationary fictitious domain problem with isoparametric Cut-DG-FEM, Nitsche and ghost penalty stabilization
 * =demos/stokescutfem.py= : stationary Stokes interface problem with an unfitted isoparametric (P2/P1) Taylor-Hood-Nitsche discretization
 * =demos/tracefem.py= : stationary 2D surface PDE problem with a TraceFEM discretization (low order)
 * =demos/tracefem3d.py= : stationary 3D surface PDE problem with a TraceFEM discretization (higher order)
 * =demos/spacetime/spacetimeP1P1.py= : moving fictitous domain problem using a space time unfitted FEM

* List of contributing authors (with major contributions)
 * Christoph Lehrenfeld
 * Janosch Preuss (space-time)
 * Fabian Heimann (cutIntegration, space-time)
 * Thomas Ludescher (multigrid)
 * Henry von Wahl (multiple levelsets)

* Notes
 * *pde vs. py files*: From version 1.0.0 on there are no pde-files used in this project anymore. Only python-files are used.
